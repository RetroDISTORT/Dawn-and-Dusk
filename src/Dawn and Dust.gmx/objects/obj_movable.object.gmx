<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_act_movable</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_mainblock</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Image */
image_index = random_range(0, 12)
image_speed = 1

/* Collision */
collision_width  = 31.9
collision_height = 31.9

/* Status */
collision_top    = collision_rectangle(x-(collision_width/2),   y-(collision_height/2), x+(collision_width/2),   y-(3*collision_height/2), obj_mainblock, 0, 1);
collision_bottom = collision_rectangle(x-(collision_width/2),   y+(collision_height/2), x+(collision_width/2),   y+(3*collision_height/2), obj_mainblock, 0, 1);
collision_left   = collision_rectangle(x-(3*collision_width/2), y+(collision_height/2), x-(collision_width/2),   y-(collision_height/2),   obj_mainblock, 0, 1);
collision_right  = collision_rectangle(x+(collision_width/2),   y+(collision_height/2), x+(3*collision_width/2), y-(collision_height/2),   obj_mainblock, 0, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>collision_top    = collision_rectangle(x-(collision_width/2),   y-(collision_height/2), x+(collision_width/2),   y-(3*collision_height/2), obj_obstacle, 0, 1);
collision_bottom = collision_rectangle(x-(collision_width/2),   y+(collision_height/2), x+(collision_width/2),   y+(3*collision_height/2), obj_obstacle, 0, 1);
collision_left   = collision_rectangle(x-(3*collision_width/2), y+(collision_height/2), x-(collision_width/2),   y-(collision_height/2),   obj_obstacle, 0, 1);
collision_right  = collision_rectangle(x+(collision_width/2),   y+(collision_height/2), x+(3*collision_width/2), y-(collision_height/2),   obj_obstacle, 0, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hole">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x=other.x
y=other.y
solid=0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>202</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_change_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>obj_un_movable</object>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEBUGGER Collisions
debug_right_collision  = 0
debug_left_collision   = 0
debug_top_collision    = 0
debug_bottom_collision = 0

if (debug_right_collision)
    draw_rectangle_colour(x+(collision_width/2),   y+(collision_height/2), x+(3*collision_width/2), y-(collision_height/2), c_red, c_red, c_red, c_red, 1)

if (debug_left_collision)
    draw_rectangle_colour(x-(3*collision_width/2), y+(collision_height/2), x-(collision_width/2),   y-(collision_height/2), c_red, c_red, c_red, c_red, 1)

if (debug_top_collision)
    draw_rectangle_colour(x-(collision_width/2),   y-(collision_height/2), x+(collision_width/2),   y-(3*collision_height/2), c_red, c_red, c_red, c_red, 1)

if (debug_bottom_collision)
    draw_rectangle_colour(x-(collision_width/2),   y+(collision_height/2), x+(collision_width/2),   y+(3*collision_height/2), c_red, c_red, c_red, c_red, 1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
